var searchIndex = JSON.parse('{\
"argon2_creds":{"doc":"Argon2-Creds provides abstractions over credential…","i":[[0,"config","argon2_creds","",null,null],[3,"Config","argon2_creds::config","",null,null],[3,"ConfigBuilder","","Builder for `Config`.",null,null],[11,"profanity","","",0,[[]]],[11,"blacklist","","",0,[[]]],[11,"username_case_mapped","","",0,[[]]],[11,"salt_length","","",0,[[]]],[11,"argon2","","",0,[[["config",3]]]],[11,"build","","Builds a new `Config`.",0,[[],[["config",3],["string",3],["result",4]]]],[11,"username","","process username",1,[[],[["string",3],["credsresult",6]]]],[11,"email","","process email",1,[[["option",4]],["credsresult",6]]],[11,"password","","generate hash for password",1,[[],[["string",3],["credsresult",6]]]],[11,"verify","","verify password against hash",1,[[],["credsresult",6]]],[0,"errors","argon2_creds","",null,null],[4,"CredsError","argon2_creds::errors","Errors that can occur when processing credentials",null,null],[13,"ProfainityError","","when the value passed contains profainity",2,null],[13,"UsernameCaseMappedError","","when the value passed contains characters not present in…",2,null],[13,"BlacklistError","","when the value passed contains blacklisted words see…",2,null],[13,"NotAnEmail","","email validation error",2,null],[13,"Argon2Error","","Errors from argon2",2,null],[6,"CredsResult","","",null,null],[11,"from","argon2_creds::config","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","argon2_creds::errors","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"to_string","","",2,[[],["string",3]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","","",2,[[["error",4]],["credserror",4]]],[11,"from","","",2,[[["validationerrors",3]],["credserror",4]]],[11,"clone","argon2_creds::config","",1,[[],["config",3]]],[11,"clone","","",0,[[],["configbuilder",3]]],[11,"clone","argon2_creds::errors","",2,[[],["credserror",4]]],[11,"default","argon2_creds::config","",0,[[],["configbuilder",3]]],[11,"default","","",1,[[]]],[11,"eq","argon2_creds::errors","",2,[[["credserror",4]]]],[11,"ne","","",2,[[["credserror",4]]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"source","","",2,[[],[["error",8],["option",4]]]]],"p":[[3,"ConfigBuilder"],[3,"Config"],[4,"CredsError"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);